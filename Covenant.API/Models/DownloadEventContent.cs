// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covenant.API.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DownloadEventContent
    {
        /// <summary>
        /// Initializes a new instance of the DownloadEventContent class.
        /// </summary>
        public DownloadEventContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DownloadEventContent class.
        /// </summary>
        /// <param name="level">Possible values include: 'Silent', 'Info',
        /// 'Warning', 'Highlight', 'Error'</param>
        /// <param name="type">Possible values include: 'Normal', 'Download',
        /// 'Screenshot'</param>
        /// <param name="progress">Possible values include: 'Portion',
        /// 'Complete'</param>
        public DownloadEventContent(string name, int? id = default(int?), System.DateTime? time = default(System.DateTime?), string messageHeader = default(string), string messageBody = default(string), EventLevel? level = default(EventLevel?), EventType? type = default(EventType?), string context = default(string), int? gruntCommandId = default(int?), DownloadProgress? progress = default(DownloadProgress?), string fileName = default(string), long? fileLength = default(long?), byte[] fileContents = default(byte[]))
        {
            Id = id;
            Name = name;
            Time = time;
            MessageHeader = messageHeader;
            MessageBody = messageBody;
            Level = level;
            Type = type;
            Context = context;
            GruntCommandId = gruntCommandId;
            Progress = progress;
            FileName = fileName;
            FileLength = fileLength;
            FileContents = fileContents;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public System.DateTime? Time { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messageHeader")]
        public string MessageHeader { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "messageBody")]
        public string MessageBody { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Silent', 'Info', 'Warning',
        /// 'Highlight', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "level")]
        public EventLevel? Level { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Normal', 'Download',
        /// 'Screenshot'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public EventType? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public string Context { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gruntCommandId")]
        public int? GruntCommandId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Portion', 'Complete'
        /// </summary>
        [JsonProperty(PropertyName = "progress")]
        public DownloadProgress? Progress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileLength")]
        public long? FileLength { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileContents")]
        public byte[] FileContents { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
