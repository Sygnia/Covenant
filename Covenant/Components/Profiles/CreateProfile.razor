@page "/profile/create"
@attribute [Authorize(Roles = "Administrator")]
@inherits OwningComponentBase<ICovenantService>

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Covenant.Core
@using Covenant.Models.Covenant
@using Covenant.Models.Listeners
@inject UserManager<CovenantUser> UserManager
@inject IJSRuntime IJSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap pb-2 mb-3">
    <h1 class="h2">Create Profile</h1>
</div>

<ul class="nav nav-tabs mb-3" id="listener-tab" role="tablist">
    <li class="nav-item">
        <a class="nav-link" id="http-tab" data-toggle="tab" href="#http" role="tab" aria-controls="http" aria-selected="false">
            <span class="fe fe-cloud"></span>
            HttpProfile
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="bridge-tab" data-toggle="tab" href="#bridge" role="tab" aria-controls="bridge" aria-selected="false">
            <span class="fe fe-radio"></span>
            BridgeProfile
        </a>
    </li>
</ul>

<div class="tab-content" id="listener-tab-content">
    <div class="tab-pane fade" id="http" role="tabpanel" aria-labelledby="http-tab">
        @{
            HttpProfile createdProfile = new HttpProfile
            {
                HttpUrls = new List<string> { "/index.html?id={GUID}" },
                HttpRequestHeaders = new List<HttpProfileHeader>
                {
                    new HttpProfileHeader
                    {
                        Name = "User-Agent",
                        Value = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"
                    }
                },
                HttpResponseHeaders = new List<HttpProfileHeader>
                {
                    new HttpProfileHeader
                    {
                        Name = "Server",
                        Value = "Microsoft-IIS/8.5"
                    }
                }
            };
        }
        <HttpProfileForm Profile="@HttpProfile" OnSubmit="OnCreateHttpProfile">
            <button type="submit" class="btn btn-primary">
                <span class="fe fe-plus"></span>
                Create
            </button>
            @if (!string.IsNullOrEmpty(this.DisplayError))
            {
                <div class="text-danger">@DisplayError</div>
            }
        </HttpProfileForm>
    </div>
    <div class="tab-pane fade" id="bridge" role="tabpanel" aria-labelledby="bridge-tab">
        <BridgeProfileForm Profile="@BridgeProfile" OnSubmit="OnCreateBridgeProfile">
            <button type="submit" class="btn btn-primary">
                <span class="fe fe-plus"></span>
                Create
            </button>
            @if (!string.IsNullOrEmpty(this.DisplayError))
            {
                <div class="text-danger">@DisplayError</div>
            }
        </BridgeProfileForm>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private HttpProfile HttpProfile { get; set; }
    private BridgeProfile BridgeProfile { get; set; }
    private CovenantUser CovenantUser { get; set; }
    private string DisplayError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.HttpProfile = new HttpProfile
        {
            HttpUrls = new List<string> { "/index.html?id={GUID}" },
            HttpRequestHeaders = new List<HttpProfileHeader>
            {
                new HttpProfileHeader
                {
                    Name = "User-Agent",
                    Value = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"
                }
            },
            HttpResponseHeaders = new List<HttpProfileHeader>
            {
                new HttpProfileHeader
                {
                    Name = "Server",
                    Value = "Microsoft-IIS/8.5"
                }
            }
        };
        this.BridgeProfile = new BridgeProfile();
        this.CovenantUser = await UserManager.GetUserAsync((await AuthenticationState).User);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IJSRuntime.InvokeAsync<object>("ShowTab", new[] { "#http-tab" });
        }
    }

    private async Task OnCreateHttpProfile(HttpProfile profile)
    {
        try
        {
            await Service.CreateHttpProfile(profile, this.CovenantUser);
            NavigationManager.NavigateTo($"/listener");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            this.DisplayError = e.Message;
        }
    }

    private async Task OnCreateBridgeProfile(BridgeProfile profile)
    {
        try
        {
            await Service.CreateBridgeProfile(profile, this.CovenantUser);
            NavigationManager.NavigateTo($"/listener");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            this.DisplayError = e.Message;
        }
    }
}