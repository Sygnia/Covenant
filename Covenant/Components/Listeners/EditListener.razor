@page "/listener/edit/{ListenerId:int}"
@attribute [Authorize(Roles = "User, Administrator")]
@inherits OwningComponentBase<ICovenantService>

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Authorization

@using Covenant.Core
@using Covenant.Models.Listeners;
@using Covenant.Components.HostedFiles

@inject IJSRuntime IJSRuntime
@inject CovenantAPIService CovenantAPIService
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3">
    <h1 class="h2">Listener: <span class="primary-color">@Listener.Name</span></h1>
</div>

@if (Listener.ListenerType.Name == "HTTP")
{
    <ul class="nav nav-tabs mb-3" id="listener-tab" role="tablist">
        <li class="nav-item">
            <a class="nav-link" id="info-tab" data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="false">
                <span class="fe fe-info"></span>
                Info
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="host-tab" data-toggle="tab" href="#host" role="tab" aria-controls="host" aria-selected="false">
                <span class="fe fe-cloud"></span>
                Hosted Files
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="log-tab" data-toggle="tab" href="#log" role="tab" aria-controls="log" aria-selected="false">
                <span class="fe fe-book"></span>
                Web Log
            </a>
        </li>
    </ul>

    <div class="tab-content" id="listener-tab-content">
        <div class="tab-pane fade" id="info" role="tabpanel" aria-labelledby="info-tab">
            <HttpListenerForm Listener="@((HttpListener)Listener)"
                              Profiles="new List<Profile> { Listener.Profile }"
                              OnSubmit="OnSubmitHttpListener"
                              Disabled="true">
            </HttpListenerForm>
            <div class="btn-group" role="group">
                @if (Listener.Status == ListenerStatus.Active)
                {
                    <button type="button" @onclick="StopListener" class="btn btn-warning">
                        <span class="fe fe-stop-circle"></span> Stop
                    </button>
                }
                else
                {
                    <button type="button" @onclick="StartListener" class="btn btn-primary">
                        <span class="fe fe-play"></span> Start
                    </button>
                }
                <button type="button" @onclick="DeleteListener" class="btn btn-danger ml-2">
                    <span class="fe fe-x"></span> Delete
                </button>
            </div>
            @if (!string.IsNullOrEmpty(this.DisplayError))
            {
                <div class="text-danger">@DisplayError</div>
            }
        </div>
        <div class="tab-pane fade" id="host" role="tabpanel" aria-labelledby="host-tab">
            <HostedFileIndex ListenerId="ListenerId" HostedFiles="GetHostedFiles()" />
        </div>
        <div class="tab-pane fade" id="log" role="tabpanel" aria-labelledby="log-tab">
            <LogTable LogFile="@(Common.CovenantListenersDirectory + Utilities.GetSanitizedFilename(Listener.GUID) + System.IO.Path.DirectorySeparatorChar + "requests.log")" />
        </div>
    </div>
}
else if (Listener.ListenerType.Name == "Bridge")
{
    <ul class="nav nav-tabs mb-3" id="listener-tab" role="tablist">
        <li class="nav-item">
            <a class="nav-link" id="info-tab" data-toggle="tab" href="#info" role="tab" aria-controls="info" aria-selected="false">
                <span class="fe fe-info"></span>
                Info
            </a>
        </li>
    </ul>

    <div class="tab-content" id="listener-tab-content">
        <div class="tab-pane fade" id="info" role="tabpanel" aria-labelledby="info-tab">
            <BridgeListenerForm Listener="@((BridgeListener)Listener)"
                                Profiles="new List<Profile> { Listener.Profile }"
                                OnSubmit="OnSubmitBridgeListener"
                                Disabled="true">
            </BridgeListenerForm>
            <div class="btn-group" role="group">
                @if (Listener.Status == ListenerStatus.Active)
                {
                    <button type="button" @onclick="StopListener" class="btn btn-warning">
                        <span class="fe fe-stop-circle"></span> Stop
                    </button>
                }
                else
                {
                    <button type="button" @onclick="StartListener" class="btn btn-primary">
                        <span class="fe fe-play"></span> Start
                    </button>
                }
                <button type="button" @onclick="DeleteListener" class="btn btn-danger ml-2">
                    <span class="fe fe-x"></span> Delete
                </button>
            </div>
            @if (!string.IsNullOrEmpty(this.DisplayError))
            {
                <div class="text-danger">@DisplayError</div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int ListenerId { get; set; }

    [Parameter]
    public Listener Listener { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private string DisplayError { get; set; }
    private bool IsDeleted { get; set; } = false;
    private string Token { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Listener = this.Listener ?? await Service.GetListener(this.ListenerId);
        this.Token = (await Service.GetUserToken((await AuthenticationState).User)).CovenantToken;
        Service.DisposeContext();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IJSRuntime.InvokeAsync<object>("ShowTab", new[] { "#info-tab" });
    }

    private async Task OnSubmitHttpListener(HttpListener listener)
    {
        try
        {
            await Service.EditHttpListener(listener);
            NavigationManager.NavigateTo("/listener");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            this.DisplayError = e.Message;
            Service.DisposeContext();
        }
    }

    private async Task OnSubmitBridgeListener(BridgeListener listener)
    {
        try
        {
            await Service.EditBridgeListener(listener);
            NavigationManager.NavigateTo("/listener");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            this.DisplayError = e.Message;
            Service.DisposeContext();
        }
    }

    private void StartListener()
    {
        try
        {
            if (Listener.Status != ListenerStatus.Active)
            {
                Listener.Status = ListenerStatus.Active;
                if (this.Listener.ListenerType.Name == "HTTP")
                {
                    HttpListener httpListener = (HttpListener)this.Listener;
                    _ = this.InvokeAsync(async () => await CovenantAPIService.EditHttpListener(httpListener, this.Token));
                    NavigationManager.NavigateTo("/listener");
                }
                else if (this.Listener.ListenerType.Name == "Bridge")
                {
                    BridgeListener bridgeListener = (BridgeListener)this.Listener;
                    _ = this.InvokeAsync(async () => await CovenantAPIService.EditBridgeListener(bridgeListener, this.Token));
                    NavigationManager.NavigateTo("/listener");
                }
            }
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            this.DisplayError = e.Message;
        }
        Service.DisposeContext();
        Listener.Status = ListenerStatus.Stopped;
    }

    private async Task StopListener()
    {
        try
        {
            if (Listener.Status != ListenerStatus.Stopped)
            {
                Listener.Status = ListenerStatus.Stopped;
                await Service.EditListener(Listener);
                NavigationManager.NavigateTo("/listener");
            }
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            Service.DisposeContext();
            Listener.Status = ListenerStatus.Active;
            this.DisplayError = e.Message;
        }
    }

    private async Task DeleteListener()
    {
        try
        {
            this.IsDeleted = true;
            await Service.DeleteListener(Listener.Id);
            NavigationManager.NavigateTo("/listener");
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            Service.DisposeContext();
            this.DisplayError = e.Message;
        }
    }

    private IEnumerable<HostedFile> GetHostedFiles()
    {
        return this.IsDeleted ? new List<HostedFile>() : Service.GetHostedFilesForListener(Listener.Id).WaitResult();
    }
}