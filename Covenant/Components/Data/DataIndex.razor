@page "/data"
@page "/data/index"
@attribute [Authorize(Roles = "User, Administrator")]
@inherits OwningComponentBase<ICovenantService>
@implements IDisposable

@using Microsoft.JSInterop
@using Covenant.Core
@using Covenant.Models.Covenant
@using Covenant.Models.Indicators
@using Covenant.Components.Credentials
@using Covenant.Components.Indicators
@using Covenant.Components.Events
@inject INotificationService INotificationService
@inject IJSRuntime IJSRuntime

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap pb-2 mb-3">
    <h1 class="h2">Data</h1>
</div>

<ul class="nav nav-tabs mb-3" id="data-tab" role="tablist">
    <li class="nav-item">
        <a class="nav-link" id="credentials-tab" data-toggle="tab" href="#credentials" role="tab" aria-controls="credentials" aria-selected="false">
            <span class="fe fe-key"></span>
            Credentials
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="indicators-tab" data-toggle="tab" href="#indicators" role="tab" aria-controls="indicators" aria-selected="false">
            <span class="fe fe-activity"></span>
            Indicators
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="downloads-tab" data-toggle="tab" href="#downloads" role="tab" aria-controls="downloads" aria-selected="false">
            <span class="fe fe-download"></span>
            Downloads
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="screenshots-tab" data-toggle="tab" href="#screenshots" role="tab" aria-controls="screenshots" aria-selected="false">
            <span class="fe fe-camera"></span>
            Screenshots
        </a>
    </li>
</ul>

<div class="tab-content" id="grunt-tab-content">
    <div class="tab-pane fade" id="credentials" role="tabpanel" aria-labelledby="credentials-tab">
        <CredentialTables PasswordCredentials="PasswordCredentials" HashCredentials="HashCredentials" TicketCredentials="TicketCredentials" />
        <a href="/credential/create" class="btn btn-primary">
            <span class="fe fe-plus"></span> Create
        </a>
    </div>
    <div class="tab-pane fade" id="indicators" role="tabpanel" aria-labelledby="indicators-tab">
        <IndicatorTables TargetIndicators="TargetIndicators" NetworkIndicators="NetworkIndicators" FileIndicators="FileIndicators" />
        <a href="/indicator/create" class="btn btn-primary">
            <span class="fe fe-plus"></span> Create
        </a>
    </div>
    <div class="tab-pane fade" id="downloads" role="tabpanel" aria-labelledby="downloads-tab">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center">
            <h4 class="h5">Downloads</h4>
        </div>
        <DownloadEventTable DownloadEvents="DownloadEvents.ToList()" />
    </div>
    <div class="tab-pane fade" id="screenshots" role="tabpanel" aria-labelledby="screenshots-tab">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center">
            <h4 class="h5">Screenshots</h4>
        </div>
        <ScreenshotEventTable ScreenshotEvents="ScreenshotEvents.ToList()" />
    </div>
</div>

@code {
    [Parameter]
    public List<CapturedPasswordCredential> PasswordCredentials { get; set; }

    [Parameter]
    public List<CapturedHashCredential> HashCredentials { get; set; }

    [Parameter]
    public List<CapturedTicketCredential> TicketCredentials { get; set; }

    [Parameter]
    public List<TargetIndicator> TargetIndicators { get; set; }

    [Parameter]
    public List<NetworkIndicator> NetworkIndicators { get; set; }

    [Parameter]
    public List<FileIndicator> FileIndicators { get; set; }

    [Parameter]
    public List<DownloadEvent> DownloadEvents { get; set; }

    [Parameter]
    public List<ScreenshotEvent> ScreenshotEvents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.PasswordCredentials = this.PasswordCredentials ?? (await Service.GetPasswordCredentials()).ToList();
        this.HashCredentials = this.HashCredentials ?? (await Service.GetHashCredentials()).ToList();
        this.TicketCredentials = this.TicketCredentials ?? (await Service.GetTicketCredentials()).ToList();
        this.TargetIndicators = this.TargetIndicators ?? (await Service.GetTargetIndicators()).ToList();
        this.NetworkIndicators = this.NetworkIndicators ?? (await Service.GetNetworkIndicators()).ToList();
        this.FileIndicators = this.FileIndicators ?? (await Service.GetFileIndicators()).ToList();
        this.DownloadEvents = this.DownloadEvents ?? (await Service.GetDownloadEvents()).ToList();
        this.ScreenshotEvents = this.ScreenshotEvents ?? (await Service.GetScreenshotEvents()).ToList();
        this.INotificationService.OnCreateCapturedCredential += OnCreateCredential;
        this.INotificationService.OnDeleteCapturedCredential += OnDeleteCredential;
        this.INotificationService.OnCreateIndicator += OnCreateIndicator;
        this.INotificationService.OnDeleteIndicator += OnDeleteIndicator;
        this.INotificationService.OnCreateEvent += OnCreateEvent;
        this.INotificationService.OnDeleteEvent += OnDeleteEvent;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IJSRuntime.InvokeAsync<string>("ShowTab", "#credentials-tab");
        }
    }

    public void Dispose()
    {
        this.INotificationService.OnCreateCapturedCredential -= OnCreateCredential;
        this.INotificationService.OnDeleteCapturedCredential -= OnDeleteCredential;
        this.INotificationService.OnCreateIndicator -= OnCreateIndicator;
        this.INotificationService.OnDeleteIndicator -= OnDeleteIndicator;
        this.INotificationService.OnCreateEvent -= OnCreateEvent;
        this.INotificationService.OnDeleteEvent -= OnDeleteEvent;
    }

    private void OnCreateCredential(object sender, CapturedCredential credential)
    {
        if (credential.Type == CredentialType.Password)
        {
            this.PasswordCredentials.Add((CapturedPasswordCredential)credential);
        }
        else if (credential.Type == CredentialType.Hash)
        {
            this.HashCredentials.Add((CapturedHashCredential)credential);
        }
        else if (credential.Type == CredentialType.Ticket)
        {
            this.TicketCredentials.Add((CapturedTicketCredential)credential);
        }
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnDeleteCredential(object sender, int id)
    {
        if (this.PasswordCredentials.Any(PC => PC.Id == id))
        {
            this.PasswordCredentials.RemoveAt(this.PasswordCredentials.FindIndex(PC => PC.Id == id));
        }
        else if (this.HashCredentials.Any(HC => HC.Id == id))
        {
            this.HashCredentials.RemoveAt(this.HashCredentials.FindIndex(HC => HC.Id == id));
        }
        else if (this.TicketCredentials.Any(TC => TC.Id == id))
        {
            this.TicketCredentials.RemoveAt(this.TicketCredentials.FindIndex(TC => TC.Id == id));
        }
        _ = this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnCreateIndicator(object sender, Indicator indicator)
    {
        if (indicator.Type == IndicatorType.TargetIndicator)
        {
            this.TargetIndicators.Add((TargetIndicator)indicator);
        }
        else if (indicator.Type == IndicatorType.NetworkIndicator)
        {
            this.NetworkIndicators.Add((NetworkIndicator)indicator);
        }
        else if (indicator.Type == IndicatorType.FileIndicator)
        {
            this.FileIndicators.Add((FileIndicator)indicator);
        }
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnDeleteIndicator(object sender, int id)
    {
        if (this.TargetIndicators.Any(TI => TI.Id == id))
        {
            this.TargetIndicators.RemoveAt(this.TargetIndicators.FindIndex(TI => TI.Id == id));
        }
        else if (this.NetworkIndicators.Any(NI => NI.Id == id))
        {
            this.NetworkIndicators.RemoveAt(this.NetworkIndicators.FindIndex(NI => NI.Id == id));
        }
        else if (this.FileIndicators.Any(FI => FI.Id == id))
        {
            this.FileIndicators.RemoveAt(this.FileIndicators.FindIndex(FI => FI.Id == id));
        }
        _ = this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnCreateEvent(object sender, Event ev)
    {
        if (ev.Type == EventType.Download)
        {
            this.DownloadEvents.Add((DownloadEvent)ev);
        }
        else if (ev.Type == EventType.Screenshot)
        {
            this.ScreenshotEvents.Add((ScreenshotEvent)ev);
        }
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnDeleteEvent(object sender, int id)
    {
        if (this.DownloadEvents.Any(DE => DE.Id == id))
        {
            this.DownloadEvents.RemoveAt(this.DownloadEvents.FindIndex(DE => DE.Id == id));
        }
        else if (this.ScreenshotEvents.Any(SE => SE.Id == id))
        {
            this.ScreenshotEvents.RemoveAt(this.ScreenshotEvents.FindIndex(SE => SE.Id == id));
        }
        _ = this.InvokeAsync(() => this.StateHasChanged());
    }
}