@inherits OwningComponentBase<ICovenantService>

@using System.IO
@using System.Threading
@using System.Threading.Tasks
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms

@using Covenant.Core
@using Covenant.Models.Grunts
@inject IJSRuntime IJSRuntime

<div class="modal fade" id="@GuidId" tabindex="-1" role="dialog" aria-labelledby="@GuidId-label" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="@GuidId-label">Select File</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (this.GruntTask != null)
                {
                    @for (int i = 0; i < this.GruntTask.Options.Count; i++)
                    {
                        int number = i;
                        @if (this.GruntTask.Options[number].FileOption)
                        {
                            <div class="form-group">
                                <label for="@GruntTask.Options[number].Name">@GruntTask.Options[number].Name</label><br />
                                <InputFile OnChange="(e => OnUpload(e, number))" />
                                @if (this.UploadInProgress)
                                {
                                    <span class="fe fe-loader spin"></span>
                                }
                                @if (string.IsNullOrEmpty(this.ErrorMessage))
                                {
                                    <span class="text-danger">@ErrorMessage</span>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <label for="@GruntTask.Options[number].Name">@GruntTask.Options[number].Name</label>
                                <input id="@GruntTask.Options[number].Name" name="@GruntTask.Options[number].Name" @bind="GruntTask.Options[number].Value" class="form-control">
                            </div>
                        }
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" @onclick="Execute" class="btn btn-primary">Execute</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<GruntTask> OnSubmit { get; set; }

    private GruntTask GruntTask { get; set; }
    private InputFile InputFile { get; set; }

    private string GuidId { get; set; } = "a" + Utilities.CreateShortGuid();

    public async Task Show(GruntTask task)
    {
        this.GruntTask = task;
        foreach (GruntTaskOption option in this.GruntTask.Options)
        {
            if (!string.IsNullOrWhiteSpace(option.DefaultValue) && string.IsNullOrWhiteSpace(option.Value))
            {
                option.Value = option.DefaultValue;
            }
        }
        this.StateHasChanged();
        await IJSRuntime.InvokeAsync<string>("ActivateModal", $"#{@GuidId}");
    }

    private async Task Execute()
    {
        await IJSRuntime.InvokeAsync<string>("ModalCommand", $"#{@GuidId}", "hide");
        await OnSubmit.InvokeAsync(GruntTask);
    }

    private string ErrorMessage { get; set; }
    private SemaphoreSlim UploadSemaphore { get; set; } = new SemaphoreSlim(1, 1);
    private bool UploadInProgress { get; set; } = false;
    private async Task OnUpload(InputFileChangeEventArgs e, int i)
    {
        try
        {
            await UploadSemaphore.WaitAsync();
            this.UploadInProgress = true;
            this.StateHasChanged();
            using (MemoryStream ms = new MemoryStream())
            {
                await e.File.OpenReadStream(Common.CovenantMaxFileSizeUpload).CopyToAsync(ms);
                this.GruntTask.Options[i].Value = Convert.ToBase64String(ms.ToArray());
            }
        }
        catch (Exception ex)
        {
            this.ErrorMessage = ex.Message;
        }
        this.UploadInProgress = false;
        this.StateHasChanged();
        UploadSemaphore.Release();
    }
}
